https://leetcode.com/problems/3sum/

TC : O(nlogn)+O(n^2) == O(n^2)
SC : O(1)


class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
        int n=nums.length;
        List<List<Integer>> all=new ArrayList<List<Integer>>();
        Arrays.sort(nums);    // O(logn)
        for(int i=0;i<n;i++){
            if(i>0 && nums[i]==nums[i-1]){
                continue;
            }
            int l=i+1;
            int r=n-1;   
            while(l<r){
                if(nums[i]+nums[l]+nums[r]==0){
                    all.add(Arrays.asList(nums[i],nums[l],nums[r]));
                    l++;
                    while(l<r && nums[l]==nums[l-1]){
                        l++;
                    }
                }
                else if(nums[i]+nums[l]+nums[r]<0){
                   l++; 
                }
                else{
                    r--;
                }
            }  
        }
        return all;
    }
}
