https://leetcode.com/problems/combinations/
--------------------------------------------------------------------------------------------------------------
Given two integers n and k, return all possible combinations of k numbers out of the range [1, n].
You may return the answer in any order.
Example 1:

Input: n = 4, k = 2
Output:
[
  [2,4],
  [3,4],
  [2,3],
  [1,2],
  [1,3],
  [1,4],
]
Example 2:

Input: n = 1, k = 1
Output: [[1]]
 

Constraints:

1 <= n <= 20
1 <= k <= n
------------------------------------------------------------------------------------------------------------------------
// RECURSIVE 
// SAME AS SUBSETS PROBLEM
// TC: O(n*2^n)
// SC: O(n)
class Solution {
    public void findCombi(int start, int n, int k, List<List<Integer>> res, List<Integer> ds){
        if(ds.size()==k){
            res.add(new ArrayList(ds));
            //return;
        }
        for(int i=start; i<=n;i++){
            ds.add(i);
            findCombi(i+1,n,k,res, ds);
            ds.remove(ds.size()-1);
        }
        
        
    }
    public List<List<Integer>> combine(int n, int k) {
        List<List<Integer>> res = new ArrayList<>();
        findCombi(1,n,k,res, new ArrayList<>());
        return res;
    }
}
