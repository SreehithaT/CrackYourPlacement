https://leetcode.com/problems/best-time-to-buy-and-sell-stock/submissions/

You are given an array prices where prices[i] is the price of a given stock on the ith day.

You want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock.

Return the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return 0.
Example 1:

Input: prices = [7,1,5,3,6,4]
Output: 5
Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.
Note that buying on day 2 and selling on day 1 is not allowed because you must buy before you sell.
Example 2:

Input: prices = [7,6,4,3,1]
Output: 0
Explanation: In this case, no transactions are done and the max profit = 0.

// OPTIMAL
// TC : O(N)
// SC : O(1)
class Solution {
     public int maxProfit(int[] prices) {
         int n=prices.length;
         int l=0;  // buy
         int r=1;  // sell
         int profit=0;
         while(r<n){
             profit=Math.max(profit, prices[r]-prices[l]);
             if(prices[r]<prices[l]){
                 l=r;
             }
             r++;
         }
         return profit;
     }
}




// BRUTE FORCE----> TLE
// TC : O(N^2)
// SC : O(1)
// class Solution {
//     public int maxProfit(int[] prices) {
//         int n=prices.length;
//         int profit=Integer.MIN_VALUE;
//         for(int i=0;i<n;i++){
//             for(int j=i;j<n;j++){
//                 profit=Math.max(profit, prices[j]-prices[i]);
//             }
//         }
//         return profit;
//     }
// }
