// TWO POINTER APPROACH
// https://leetcode.com/problems/sort-colors/
Given an array nums with n objects colored red, white, or blue, sort them in-place so that objects of the same color are adjacent, with the colors in the order red, white, and blue.

We will use the integers 0, 1, and 2 to represent the color red, white, and blue, respectively.

You must solve this problem without using the library's sort function.

 

class Solution {
    public void sortColors(int[] nums) {
        int n=nums.length;
        int l=0;
        int h=n-1;
        for(int i=0;i<=h;i++){ //Each time the last element will be 2, so we are limiting the loop traversal till <=h
            if(nums[i]==0){  // If element is 0 then I swap with l... Where l is an index such that elements left to l are 0 
                int temp=nums[i];
                nums[i]=nums[l];
                nums[l]=temp;
                l++;  // Here I only increment l(l is an index such that elements left to l are 0), No need to increase i. Because it as it is for loop it gets incremented by itself
            }
            else if(nums[i]==2){
                int temp=nums[i];  // When I find element as 2, I swap it with last indexed element
                nums[i]=nums[h];   // h is an element such that, elements to the right of h are always 2.. That's the reason we limit our array traversal till <=h
                nums[h]=temp;
                h--; 
                i--; // Here we decrement i because the swapped element may be 0/1. So we have to check for it again! As it is under for loop, we decrement so that after increment(due to for loop) it again points to the same.
            }
        }
    }
}
